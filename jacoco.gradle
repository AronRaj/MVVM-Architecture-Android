apply plugin: 'jacoco-android'

ext {
    limits = [
            'instruction': 10,
            'branch'     : 10,
            'line'       : 10,
            'complexity' : 10,
            'method'     : 10,
            'class'      : 10 //TODO - 100%
    ]
}

task coverageReport(dependsOn: jacocoTestReport) {

    def reportFile = project.file("build/reports/jacoco/jacocoTestDebugUnitTestReport/jacocoTestDebugUnitTestReport.xml")
    logger.lifecycle("Checking coverage results: ${reportFile}")
    inputs.file(reportFile)

    doLast {
        def slurper = new XmlSlurper()
        slurper.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        slurper.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
        def results = slurper.parse(reportFile)
        def percentage = {
            def missed = it.@missed.toDouble()
            def covered = it.@covered.toDouble()
            ((covered / (covered + missed)) * 100).round(2)
        }
        def branchCoverage
        def counters = results.counter
        def metrics = [:]
        metrics << [
                'instruction': percentage(counters.find { it.'@type'.equals('INSTRUCTION') }),
                'branch'     : percentage(counters.find { it.'@type'.equals('BRANCH') }),
                'line'       : percentage(counters.find { it.'@type'.equals('LINE') }),
                'complexity' : percentage(counters.find { it.'@type'.equals('COMPLEXITY') }),
                'method'     : percentage(counters.find { it.'@type'.equals('METHOD') }),
                'class'      : percentage(counters.find { it.'@type'.equals('CLASS') })
        ]
        def failures = []
        metrics.each {
            def limit = limits[it.key]
            if (it.value < limit) {
                failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
            }
            if (it.key == 'branch') {
                branchCoverage = it.value
            }
        }

        if (failures) {
            logger.quiet("------------------ Code Coverage Failed -----------------------")
            failures.each {
                logger.quiet(it)
            }
            logger.quiet("---------------------------------------------------------------")
            throw new GradleException("Code coverage failed")
        } else{
            logger.quiet("Passed Code Coverage Checks")
            //printf "Missed %.0f branches%n", missed
            //printf "Covered %.0f branches%n", covered
            printf "Total %.0f%%%n", branchCoverage
        }
        /*def counter = results.counter.find {
            node -> node.@type == 'BRANCH'
        }
        def missed = counter.@missed.toDouble()
        def covered = counter.@covered.toDouble()
        def total = missed + covered
        def percentage = covered / total * 100

        printf "Missed %.0f branches%n", missed
        printf "Covered %.0f branches%n", covered
        printf "Total %.0f%%%n", percentage*/
    }
}